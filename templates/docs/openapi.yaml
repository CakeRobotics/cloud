openapi: "3.0.0"
info:
  description: |
    This service provides an API for creating and managing robot *templates*.
    
    A robot *template* is a data object that describes the hardware of a class of robots. For example, "Three wheeled ground robot with lidar on top" is a robot template.
    
    A robot template can be used to create a *project*. See the docs on *project*. Also see the document "CAKE-DOC-projects-arch-and-ux".
    
    There is a URDF at the core of a robot template. A template also includes parameters that typically correspond to the xacro constants used in the URDF. When assigning robot to a device, user can change these parameters, making them match the properties of the real world robot in hand.
    
    Some templates may have no parameters. For example, a "Turtlebot" template would probably have no parameters, as the template targets a commercial robot.
  version: "1.0.0"
  title: "Cake Templates Service"
  termsOfService: "https://cakerobotics.com/terms/"
  contact:
    email: "support@cakerobotics.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
servers:
  - url: "http://cloud.cakerobotics.com/api/templates"

components:
  securitySchemes:
    adminUser:
      type: http
      scheme: bearer
      bearerFormat: JWT
    normalUser:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    TemplateCompact:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        tags:
          type: array
          items:
            type: string
        thumbnail:
          type: string
          description: Base64 blob
    Template:
      type: object
      required:
        - _id
        - name
      properties:
        _id:
          type: string
        name:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        image:
          type: string
          description: Base64 blob
        params:
          type: array
          items:
            type: object
            properties:
              key:
                type: string
              description:
                type: string
              category:
                type: string
              image:
                type: string
                description: Base64 blob
    TemplateNo_id:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        image:
          type: string
          description: Base64 blob
        params:
          type: array
          items:
            type: object
            properties:
              key:
                type: string
              description:
                type: string
              category:
                type: string
              image:
                type: string
                description: Base64 blob
  examples:
    TemplateCompactArray:
      summary: A list of templates
      value:
        - _id: "7f426d2d-2dd2-4398-b2b4-b30c88de527f"
          name: Three-wheeled with Lidar
          tags:
            - ground
            - lidar
          thumbnail: "/9j/4AAQSkZJRgABAQEAYAB"
        - _id: "cdce2204-bbeb-471e-abe9-ed4fb99b477a"
          name: Three-wheeled with Camera
          tags:
            - ground
            - camera
          thumbnail: "8VAfzE599duLWh00HUvFdXDjmnuClzdE7K"
    Template:
      value:
        _id: "cdce2204-bbeb-471e-abe9-ed4fb99b477a"
        name: Three-wheeled with Camera
        description: This is a ground robot with three wheels, and a single RGB camera.
        tags:
          - ground
          - camera
        image: "/9j/4AAQSkZJRgABAQEAYAB"
        params:
          - key: width
            description: Width (m)
            category: Geometry
            image: "h00HUvFdXDjmnuClzd"
          - key: camera-fov
            description: Camera FOV (deg)
            category: Sensors
    TemplateNo_id:
      value:
        name: Three-wheeled with Camera
        description: This is a ground robot with three wheels, and a single RGB camera.
        tags:
          - ground
          - camera
        image: "/9j/4AAQSkZJRgABAQEAYAB"
        params:
          - key: width
            description: Width (m)
            category: Geometry
            image: "h00HUvFdXDjmnuClzd"
          - key: camera-fov
            description: Camera FOV (deg)
            category: Sensors
  parameters:
    template:
      name: template
      description: Template _id
      in: path
      required: true
      schema:
        type: string
        example: "cdce2204-bbeb-471e-abe9-ed4fb99b477a"
    username:
      name: username
      in: path
      required: true
      schema:
        type: string
        example: alice-k4
  responses:
    unauthorized:
      description: |
            Unauthorized for one of the following reasons:
            - Authorization header is empty or not in "Bearer {token}" format
            - Authorization token is invalid
            - Authorization token is valid but access is denied; only admin users can access apps that belong to other users.

paths:
  /all:
    get:
      summary: Query the templates available
      tags: [Public Templates]
      operationId: query
      responses:
        '200':
          description: List of the templates
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/TemplateCompact"
              examples:
                Templates:
                  "$ref": "#/components/examples/TemplateCompactArray"
    post:
      summary: Add a template
      tags: [Public Templates]
      operationId: createTemplate
      security:
        - adminUser: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/TemplateNo_id"
            examples:
              Template:
                "$ref": "#/components/examples/TemplateNo_id"
      responses:
        '209':
          description: Template added.
          content:
            application/json:
              schema:
                type: string
                description: Template _id
                example: "cdce2204-bbeb-471e-abe9-ed4fb99b477a"
        '400':
          description: Invalid template structure.
  /all/{template}:
    get:
      summary: Get details about a template
      tags: [Public Templates]
      operationId: getTemplate
      parameters:
        - "$ref": "#/components/parameters/template"
      responses:
        '200':
          description: Template details
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Template"
              examples:
                Template:
                  "$ref": "#/components/examples/Template"
        '400':
          description: Bad _id format.
        '404':
          description: _id lookup returned empty.
    delete:
      summary: Delete a template
      tags: [Public Templates]
      operationId: deleteTemplate
      security:
        - adminUser: []
      parameters:
        - "$ref": "#/components/parameters/template"
      responses:
        '200':
          description: Template deleted.
        '404':
          description: _id lookup returned empty.
    put:
      summary: Update a template
      tags: [Public Templates]
      operationId: putTemplate
      security:
        - adminUser: []
      parameters:
        - "$ref": "#/components/parameters/template"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Template"
            examples:
              templates:
                "$ref": "#/components/examples/Template"
      responses:
        '200':
          description: Template updated.
        '400':
          description: Bad _id format.
        '404':
          description: _id lookup returned empty.

  /health:
    get:
      summary: Get service health state
      tags: [Misc]
      responses:
        '200':
          description: Healthy
